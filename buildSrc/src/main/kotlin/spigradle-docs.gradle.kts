import java.net.URL

plugins {
    id("org.jetbrains.dokka")
}

tasks {
    dokka {
        outputFormat = "html"
        outputDirectory = "$buildDir/kdoc"
        configuration {
            moduleName = project.name
            jdkVersion = 8
            sourceLink {
                path = "src/main/kotlin"
                url = "https://github.com/spigradle/spigradle/tree/master/src/main/kotlin"
                lineSuffix = "#L"
            }
            externalDocumentationLink {
                url = URL("https://docs.gradle.org/current/javadoc/")
                packageListUrl = URL("https://docs.gradle.org/current/javadoc/package-list")
            }
            externalDocumentationLink {
                url = URL("https://docs.groovy-lang.org/latest/html/gapi/")
                packageListUrl = URL("https://docs.groovy-lang.org/latest/html/gapi/package-list")
            }
            externalDocumentationLink {
                url = URL("https://javadoc.io/doc/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/latest/")
                packageListUrl = URL("https://javadoc.io/doc/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/latest/package-list")
            }
            externalDocumentationLink {
                url = URL("https://hub.spigotmc.org/javadocs/spigot/")
                packageListUrl = URL("https://hub.spigotmc.org/javadocs/spigot/package-list")
            }
        }
    }

    val updateTemplateDocs by tasks.registering {
        group = "spigradle build"
        fun CopySpec.configure() {
            expand(
                    "GRADLE_VERSION" to gradle.gradleVersion,
                    "SPIGRADLE_VERSION" to project.version,
                    "KOTLIN_VERSION" to "1.3.72",
                    "version" to "\$version"
            )
            filter { line ->
                if (line.contains(Regex("^#[#]?[#]? "))) """
                $line
                
                [comment]: <> (!! Do not edit this file but 'docs/templates' or 'docs/root-templates', See [CONTRIBUTING.md] !!)
            """.trimIndent() else line
            }
            rename { name ->
                name.replace(Regex("^template_"), "")
            }
        }
        doLast {
            val docsDir = project.rootDir.resolve("docs")
            copy {
                from(docsDir.resolve("templates"))
                include("*.md")
                into(docsDir)
                configure()
            }
            copy {
                from(docsDir.resolve("root-templates"))
                include("*.md")
                into(project.rootDir)
                configure()
            }
        }
    }
}