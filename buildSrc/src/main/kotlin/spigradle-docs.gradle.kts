plugins {
    id("org.jetbrains.dokka")
}

dokka {
    moduleName = project.name

    dokkaSourceSets.named("main") {
        jdkVersion = 8

        sourceLink {
            localDirectory = rootDir
            remoteUrl("https://github.com/spigradle/spigradle/tree/master")
            remoteLineSuffix = "#L"
        }

        externalDocumentationLinks {
            register("groovy-docs") {
                url("https://docs.groovy-lang.org/latest/html/gapi/")
                packageListUrl("https://docs.groovy-lang.org/latest/html/gapi/package-list")
            }
            register("gradle-docs") {
                url("https://docs.gradle.org/current/javadoc/")
                packageListUrl("https://docs.gradle.org/current/javadoc/package-list")
            }
            register("jackson-dataformat-yaml-docs") {
                url("https://javadoc.io/doc/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/latest/")
                packageListUrl("https://javadoc.io/doc/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/latest/package-list")
            }
            register("spigot-docs") {
                url("https://hub.spigotmc.org/javadocs/spigot/")
                packageListUrl("https://hub.spigotmc.org/javadocs/spigot/package-list")
            }
        }
    }
}

tasks.register("updateTemplateDocs") {
    group = "spigradle build"
    fun CopySpec.configure() {
        expand(
            "GRADLE_VERSION" to gradle.gradleVersion,
            "SPIGRADLE_VERSION" to project.version,
            "KOTLIN_VERSION" to "2.1.20",
            "version" to "\$version"
        )
        filter { line ->
            if (line.contains(Regex("^#[#]?[#]? "))) """
                $line
                
                [comment]: <> (!! Do not edit this file but 'docs/templates' or 'docs/root-templates', See [CONTRIBUTING.md] !!)
            """.trimIndent() else line
        }
        rename { name ->
            name.replace(Regex("^template_"), "")
        }
    }
    doLast {
        val docsDir = project.rootDir.resolve("docs")
        copy {
            from(docsDir.resolve("templates"))
            include("*.md")
            into(docsDir)
            configure()
        }
        copy {
            from(docsDir.resolve("root-templates"))
            include("*.md")
            into(project.rootDir)
            configure()
        }
    }
}
