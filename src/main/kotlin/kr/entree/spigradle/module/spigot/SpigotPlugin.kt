package kr.entree.spigradle.module.spigot

import kr.entree.spigradle.data.Load
import kr.entree.spigradle.data.SpigotRepositories
import kr.entree.spigradle.internal.Groovies
import kr.entree.spigradle.module.common.Download
import kr.entree.spigradle.module.common.applySpigradlePlugin
import kr.entree.spigradle.module.common.setupDescGenTask
import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.kotlin.dsl.*
import java.io.File

/**
 * Created by JunHyung Lim on 2020-04-28
 */
class SpigotPlugin : Plugin<Project> {
    companion object {
        const val DESC_GEN_TASK_NAME = "generateSpigotDescription"
        const val MAIN_DETECTION_TASK_NAME = "detectSpigotMain"
        const val EXTENSION_NAME = "spigot"
        const val DESC_FILE_NAME = "plugin.yml"
        const val PLUGIN_SUPER_CLASS = "org/bukkit/plugin/java/JavaPlugin"
        const val BUILD_TOOLS_URL = "https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar"
    }

    override fun apply(project: Project) {
        with(project) {
            applySpigradlePlugin()
            setupDefaultRepositories()
            setupDescGenTask<SpigotDescription>(
                    EXTENSION_NAME,
                    DESC_GEN_TASK_NAME,
                    MAIN_DETECTION_TASK_NAME,
                    DESC_FILE_NAME,
                    PLUGIN_SUPER_CLASS
            )
            setupGroovyExtensions()
            setupDebugTasks()
        }
    }

    private fun Project.setupDefaultRepositories() {
        SpigotRepositories.run {
            listOf(SPIGOT_MC, PAPER_MC)
        }.forEach {
            repositories.maven(it)
        }
    }

    private fun Project.setupGroovyExtensions() {
        Groovies.getExtensionFrom(extensions.getByName(EXTENSION_NAME)).apply {
            set("POST_WORLD", Load.POST_WORLD)
            set("STARTUP", Load.STARTUP)
        }
    }

    private fun Project.setupDebugTasks() {
        // downloadBuildTools -> buildSpigot -> copySpigot -> runSpigot -> copyPlugins(TO-DO)
        // prepareSpigot, runSpigot
        val debugOption = extensions.getByName<SpigotDescription>("spigot").debug
        val downloadSpigotBuildTools by tasks.creating(Download::class) {
            description = "Download the BuildTools."
            source = BUILD_TOOLS_URL
            destination = debugOption.buildToolJar
            dependsOn(tasks.getByName("idea"))
        }
        val buildSpigot = tasks.create<BuildSpigot>("buildSpigot").apply {
            buildToolJar = downloadSpigotBuildTools.destination
            dependsOn(downloadSpigotBuildTools)
        }
        val prepareSpigot by tasks.creating {
            group = "spigradle"
            description = "Copy the spigot.jar generated by BuildTools into the given path."
            mustRunAfter(downloadSpigotBuildTools, buildSpigot)
            onlyIf {
                !debugOption.spigotJar.isFile
            }
            doFirst {
                val buildVersion = buildSpigot.buildData["minecraftVersion"]?.toString()
                        ?: throw GradleException("Couldn't find the value 'minecraftVersion' in BuildTools/BuildData/info.json.")
                val resultJar = File(buildSpigot.outputDirectory, "spigot-$buildVersion.jar").apply { parentFile.mkdirs() }
                copy {
                    from(resultJar)
                    into(debugOption.spigotJar.parentFile)
                    rename { debugOption.spigotJar.name }
                }
            }
        }
        val runSpigot by tasks.creating(RunSpigot::class) {
            group = "spigradle"
            description = "Startup the spigot server."
            spigotJar = debugOption.spigotJar
            standardInput = System.`in`
            dependsOn(prepareSpigot)
            doFirst {
                if (debugOption.eula) {
                    eula = true
                }
            }
        }
    }
}